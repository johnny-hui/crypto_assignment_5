import hashlib
import secrets

from models.UserViewModel import UserViewModel
from utility.init import parse_arguments
from tinyec import registry


def generate_keys():
    """
    Generates a public/private key pair using
    the brainpool256r1 elliptic curve.

    @param mode:
        A string that declares whether calling class is
        a 'Server' or 'Client'

    @return: private_key, public_key
    """
    def compress(key):
        """
        Compresses a key generated by ECDH key
        exchange protocol into a hex representation
        of 65 hex digits.

        @param key:
            The key to be compressed

        @return: Compressed Key
            A compressed key represented as a hex string
        """
        return hex(key.x) + hex(key.y % 2)[2:]

    # Define BrainPool 256-bit Elliptic Curve
    curve = registry.get_curve('brainpoolP256r1')

    # Generate Private Key (a random int from [1, n-1])
    private_key = secrets.randbelow(curve.field.n)

    # Generate Public Key (a * G)
    public_key = private_key * curve.g
    print("[+] ECDH Private/Public Key pairs have been successfully generated!")

    print(f"[+] Private key: {hex(private_key)}")
    print(f"[+] Public key: {compress(public_key)}")

    return private_key, public_key


def derive_shared_secret(pvt_key: int, pub_key):
    """
    Derives the shared secret between a private key
    and another host's public key by performing ECC point
    multiplication

    @param pvt_key:
        An owning host's private key

    @param pub_key:
        The other host's public key

    @return: shared_secret
        The result of pvt_key * pub_key
    """
    return pvt_key * pub_key


if __name__ == '__main__':
    mode, subkey_flag, key = parse_arguments()

    bob_pvt_key, bob_pub_key = generate_keys()
    alice_pvt_key, alice_pub_key = generate_keys()
    shared_secret_point = derive_shared_secret(bob_pvt_key, alice_pub_key)
    shared_secret_bytes = shared_secret_point.x.to_bytes((shared_secret_point.x.bit_length() + 7) // 8, 'big')

    hash_object = hashlib.sha256(shared_secret_bytes).digest()
    main_key = hash_object[:16]

    menu = UserViewModel(key, mode, subkey_flag)
    menu.start()
